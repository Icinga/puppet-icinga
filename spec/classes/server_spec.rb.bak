# frozen_string_literal: true

require 'spec_helper'

describe 'icinga::server' do
  on_supported_os.each do |os, os_facts|
    context "on #{os}" do
      let(:facts) { os_facts }

      case os_facts[:operatingsystem]
      when 'RedHat', 'CentOS', 'Fedora', 'OracleLinux', 'Scientific', 'Debian', 'Ubuntu'

        context 'with defaults' do
          it { is_expected.to compile }
          it { is_expected.to contain_class('icinga') }
        end

        context 'with web_api_user => foo, web_api_pass => bar' do
          let(:params) { { web_api_user: 'foo', web_api_pass: 'bar' } }

          it { is_expected.to compile }
          it { is_expected.to contain_class('icinga') }
          it { is_expected.to contain_icinga2__object__apiuser('foo').with(
            'password' => 'bar') }
        end

        context 'with config_server => true, zone => foobar, global_zones => [foo, bar]' do
          let(:params) { { config_server: true, zone: 'foobar', global_zones: ['foo', 'bar'] } }

          it { is_expected.to compile }
          it { is_expected.to contain_class('icinga') }
          it { is_expected.to contain_icinga2__object__zone('foo').with(
            'global' => true) }
          it { is_expected.to contain_icinga2__object__zone('bar').with(
            'global' => true) }
          it { is_expected.to contain_file('/etc/icinga2/zones.d/foobar').with(
            'ensure' => 'directory') }
          it { is_expected.to contain_file('/etc/icinga2/zones.d/foo').with(
            'ensure' => 'directory') }
          it { is_expected.to contain_file('/etc/icinga2/zones.d/bar').with(
            'ensure' => 'directory') }
        end

      else
        context 'defaults' do
          it { is_expected.to compile.and_raise_error(%r{not supported}) }
        end
      end
    end

  end
end
